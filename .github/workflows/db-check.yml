name: DB check

on: 
  workflow_call:
    inputs:
      paths:
        required: false
        type: string
      git_author_name:
        required: false
        type: string
      git_author_email:
        required: false
        type: string
      git_committer_name:
        required: false
        type: string
      git_committer_email:
        required: false
        type: string
      csvlint_params:
        required: false
        type: string
      vscode_workspace_file:
        required: false
        type: string
      pr_enabled:
        required: false
        type: boolean
      automerge_enabled:
        required: false
        type: boolean
    secrets:
      token:
        required: true

env:
  CSVLINT_PATH: ~/csvlint
  PROBLEM_MATCHER: .github/csvlint.json
  WORKFLOW_REPO: Warhammer-Mods/workflows

jobs:

  db-check:
    runs-on: ubuntu-latest
    outputs:
      clean: ${{ steps.changes.outputs.clean }}
      changed_files: ${{ steps.changes.outputs.files }}
      paths: ${{ steps.vars.outputs.paths }}
      csvlint_params: ${{ steps.vars.outputs.csvlint_params }}
      git_author_name: ${{ steps.vars.outputs.git_author_name }}
      git_author_email: ${{ steps.vars.outputs.git_author_email }}
      git_committer_name: ${{ steps.vars.outputs.git_committer_name }}
      git_committer_email: ${{ steps.vars.outputs.git_committer_email }}
      vscode_workspace_file: ${{ steps.vars.outputs.vscode_workspace_file }}

    steps:

    - uses: actions/checkout@v3

    - name: Set variables
      id: vars
      shell: bash
      run: |
        echo "CSVLINT_PATH=${CSVLINT_PATH/#\~/$HOME}" >> $GITHUB_ENV # expand tilde

        # set defaults for missing variables
        if [[ -z "${{ inputs.paths }}" ]]; then
          var='db'
          echo "::set-output name=paths::${var}"
        else
          echo "::set-output name=paths::${{ inputs.paths }}"
        fi

        if [[ -z "${{ inputs.git_author_name }}" ]]; then
          var='github-actions[bot]'
          echo "::set-output name=git_author_name::${var}"
        else
          echo "::set-output name=git_author_name::${{ inputs.git_author_name }}"
        fi

        if [[ -z "${{ inputs.git_author_email }}" ]]; then
          var='41898282+github-actions[bot]@users.noreply.github.com'
          echo "::set-output name=git_author_email::${var}"
        else
          echo "::set-output name=git_author_email::${{ inputs.git_author_email }}"
        fi

        if [[ -z "${{ inputs.git_committer_name }}" ]]; then
          if [[ -z "${{ inputs.git_author_name }}" ]]; then
            var='github-actions[bot]'
            echo "::set-output name=git_committer_name::${var}"
          else
            echo "::set-output name=git_committer_name::${{ inputs.git_author_name }}"
          fi
        else
          echo "::set-output name=git_committer_name::${{ inputs.git_committer_name }}"
        fi

        if [[ -z "${{ inputs.git_committer_email }}" ]]; then
          if [[ -z "${{ inputs.git_author_email }}" ]]; then
            var='41898282+github-actions[bot]@users.noreply.github.com'
            echo "::set-output name=git_committer_email::${var}"
          else
            echo "::set-output name=git_committer_email::${{ inputs.git_author_email }}"
          fi
        else
          echo "::set-output name=git_committer_email::${{ inputs.git_committer_email }}"
        fi

        if [[ -z "${{ inputs.csvlint_params }}" ]]; then
          var="--lazyquotes --delimiter='\\t'"
          echo "::set-output name=csvlint_params::${var}"
        else
          echo "::set-output name=csvlint_params::${{ inputs.csvlint_params }}"
        fi

        if [[ -z "${{ inputs.vscode_workspace_file }}" ]]; then
          var=$(find . -type f -iname "*.code-workspace" -print | cut -d/ -f2- | head -n 1)
          echo "::set-output name=vscode_workspace_file::${var}"
        else
          echo "::set-output name=vscode_workspace_file::${{ inputs.vscode_workspace_file }}"
        fi

    - name: Cache dos2unix
      id: cache-dos2unix
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-dos2unix-cache
        path: "~/dos2unix"

    - name: Install dos2unix
      env:
        CACHE_HIT: ${{ steps.cache-dos2unix.outputs.cache-hit }}
      run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            echo "::group::Copied files"
            sudo cp --verbose --force --recursive ~/dos2unix/* /
            echo "::endgroup::"
          else
            sudo apt-get install --yes dos2unix
            mkdir -p ~/dos2unix
            sudo dpkg -L dos2unix \
            | while IFS= read -r f; do 
                if test -f $f; then
                  echo $f
                fi
              done \
            | xargs cp --parents --target-directory ~/dos2unix/
          fi

    - name: Normalize LF/CRLF
      run: |
        for f in "${{ steps.vars.outputs.paths }}"; do
          if [[ -d ${f} ]]; then # check if supplied path is directory
            find ${f} -type f -iname "*.tsv" -exec dos2unix {} \;
          elif [[ -f ${f} ]]; then
            dos2unix ${f}
          fi
        done 

    - name: Set csvlint info
      id: csvlint-info
      run: |
        repo="Clever/csvlint"

        response=$(
          curl -sL "${GITHUB_API_URL}/repos/${repo}/releases/latest" \
          | jq -rc
        )

        version="$(jq -r '.name' <<< ${response})"
        download_url="$(jq -r '.assets[].browser_download_url' <<< ${response} | grep -i "$(uname -s)")"

        echo "::set-output name=json::${response}"
        echo "::set-output name=latest-version::${version}"
        echo "::set-output name=download-url::${download_url}"

    - name: Cache cvslint
      id: csvlint-cache
      uses: actions/cache@v3
      with:
        key: "${{ runner.os }}-csvlint@${{ steps.csvlint-info.outputs.latest-version }}"
        path: ${{ env.CSVLINT_PATH }}

    - if: steps.csvlint-cache.outputs.cache-hit == 'true'
      run: echo "${{ env.CSVLINT_PATH }}" >> ${GITHUB_PATH}

    - name: Install csvlint
      id: csvlint-install
      if: steps.csvlint-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p ${{ env.CSVLINT_PATH }}
        curl -sL ${{ steps.csvlint-info.outputs.download-url }} \
        | tar -xzvf - --strip-components=1 -C ${{ env.CSVLINT_PATH }}
        echo "${{ env.CSVLINT_PATH }}" >> ${GITHUB_PATH}
    
    - name: Check TSV syntax
      id: check_syntax
      shell: bash --noprofile --norc {0}
      env:
        matcher: ${{ env.PROBLEM_MATCHER }}
      run: |
        checkTSV () {
          echo "File: $@"
          csvlint ${{ steps.vars.outputs.csvlint_params }} "$@"
          exit_code=$?
          echo "::debug::Check finished with exit code: ${exit_code}"
          return ${exit_code}
        }
        export -f checkTSV

        curl -sL --fail \
          -o ${matcher} \
          "${GITHUB_SERVER_URL}/${{ env.WORKFLOW_REPO }}/raw/main/${matcher}"

        exit_code=0

        echo "::add-matcher::${matcher}"
        for path in "${{ steps.vars.outputs.paths }}"; do
          if [[ -d ${path} ]]; then
            find ${path} -type f -iname "*.tsv" -print0 | xargs -0 -I {} bash -c 'checkTSV "$@"' _ {}
            last_exit_code=$?
            (( last_exit_code > exit_code )) && exit_code=${last_exit_code}
          elif [[ -f ${path} ]]; then
            checkTSV "${path}"
            last_exit_code=$?
            (( last_exit_code > exit_code )) && exit_code=${last_exit_code}
          fi
        done

        echo "::remove-matcher owner=csvlint_error::"
        echo "::remove-matcher owner=csvlint_warning::"
        rm -fv ${matcher}

        echo "::debug::Exiting with code: ${exit_code}"
        exit ${exit_code}

    - name: Get file changes
      id: changes
      run: |
        changes=$(git ls-files \
          --modified \
          --others \
          --exclude-standard \
          ${{ steps.vars.outputs.paths }}
        )
        echo "::debug::${changes}"

        if [ -z "${changes}" ]; then
          echo "::set-output name=clean::true"
        else
          files=()
          echo "::group::Files changed"
          while IFS= read -r line; do
            files+=("${line}")
            echo "::notice file=${file}::File changed: ${line}"
            echo "::debug::$(git diff ${file})"
          done <<< ${changes}
          echo "::endgroup::"
          echo "::set-output name=files::${files[@]}"
          echo "::set-output name=clean::false"
        fi

    - name: Upload DBs
      if: steps.changes.outputs.clean == 'false' && inputs.pr_enabled == true
      uses: actions/upload-artifact@v2
      with:
        name: fixed-dbs
        path: ${{ steps.changes.outputs.files }}

  create-pr:
    runs-on: ubuntu-latest
    needs: db-check
    if: needs.db-check.outputs.clean == 'false' && inputs.pr_enabled == true

    steps:
    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Download DBs
      uses: actions/download-artifact@v2
      with:
        name: fixed-dbs

    - name: Commit files
      id: commit
      run: |
        git config --local user.email ${{ needs.db-check.outputs.git_author_email }}
        git config --local user.name ${{ needs.db-check.outputs.git_author_name }}
        git add ${{ needs.db-check.outputs.changed_files }}
        git commit -m "Fix DBs"

    - name: Create a PR
      id: pr
      uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.token }}
        committer: >-
          ${{ format(
          '{0} <{1}>',
          needs.db-check.outputs.git_committer_name,
          needs.db-check.outputs.git_committer_email
          ) }}
        author: >-
          ${{ format(
          '{0} <{1}>',
          needs.db-check.outputs.git_author_name,
          needs.db-check.outputs.git_author_email
          ) }}
        branch: bot/tsv-patch
        delete-branch: true
        signoff: false
        title: "[DB Check] Fix DBs"
        body: |
          **Fixes**:
            - Line ending normalization (`CRLF` → `LF`)

          ---

          Keep getting these PRs?  
          Make sure you open your project using [VSCode workspace file](../tree/master/${{ needs.db-check.outputs.vscode_workspace_file}}).
          You can also check out this [article](https://docs.github.com/en/get-started/getting-started-with-git/configuring-git-to-handle-line-endings).
        labels: |
          automation
          db

    - name: Show info
      run: |
        echo "::notice::${{ format(
          'Pull request #{0} is {1}: {2}',
          steps.pr.outputs.pull-request-number,
          steps.pr.outputs.pull-request-operation,
          steps.pr.outputs.pull-request-url
        ) }}"

    - name: Enable Pull Request Automerge
      if: steps.pr.outputs.pull-request-operation == 'created' && inputs.automerge_enabled == true
      uses: peter-evans/enable-pull-request-automerge@v2
      with:
        token: ${{ secrets.token }}
        pull-request-number: ${{ steps.pr.outputs.pull-request-number }}
        merge-method: squash
