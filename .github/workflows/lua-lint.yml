name: Lua lint

on: 
  workflow_call:
    inputs:
      debug_enabled:
        required: false
        type: boolean
      paths:
        required: false
        type: string
      config_file:
        required: false
        type: string
      custom_lua_globals:
        required: false
        type: string
      vendor_path:
        required: false
        type: string
      lua_version:
        required: false
        type: string
      luarocks_version:
        required: false
        type: string
      pr_enabled:
        required: false
        type: boolean
      automerge_enabled:
        required: false
        type: boolean
      git_author_name:
        required: false
        type: string
      git_author_email:
        required: false
        type: string
      git_committer_name:
        required: false
        type: string
      git_committer_email:
        required: false
        type: string
    secrets:
      token:
        required: true

env:
  WORKFLOW_REPO: Warhammer-Mods/workflows
  WORKFLOW_REF: v1
  PROBLEM_MATCHER: luacheck-plain.json

jobs:
  setup-and-lint:
    runs-on: ubuntu-latest
    outputs:
      clean: ${{ steps.changes.outputs.clean }}
      files: ${{ steps.changes.outputs.files }}
      vendor_path: ${{ steps.vars.outputs.vendor_path }}
      config_file: ${{ steps.vars.outputs.config_file }}
      lua_version: ${{ steps.vars.outputs.lua_version }}
      luarocks_version: ${{ steps.vars.outputs.luarocks_version }}
      git_author_name: ${{ steps.vars.outputs.git_author_name }}
      git_author_email: ${{ steps.vars.outputs.git_author_email }}
      git_committer_name: ${{ steps.vars.outputs.git_committer_name }}
      git_committer_email: ${{ steps.vars.outputs.git_committer_email }}

    steps:

    - name: Set variables
      id: vars
      shell: bash
      run: |
        # set defaults for missing variables
        if [[ -z "${{ inputs.paths }}" ]]; then
          echo "::set-output name=paths::script"
        else
          echo "::set-output name=paths::${{ inputs.paths }}"
        fi

        if [[ -z "${{ inputs.config_file }}" ]]; then
          echo "::set-output name=config_file::.luacheckrc"
        else
          echo "::set-output name=config_file::${{ inputs.config_file }}"
        fi

        if [[ -z "${{ inputs.lua_version }}" ]]; then
          echo "::set-output name=lua_version::5.1"
        else
          echo "::set-output name=lua_version::${{ inputs.lua_version }}"
        fi

        if [[ -z "${{ inputs.luarocks_version }}" ]]; then
          echo "::set-output name=luarocks_version::3.9.1"
        else
          echo "::set-output name=luarocks_version::${{ inputs.luarocks_version }}"
        fi

        if [[ -z "${{ inputs.git_author_name }}" ]]; then
          echo "::set-output name=git_author_name::github-actions[bot]"
        else
          echo "::set-output name=git_author_name::${{ inputs.git_author_name }}"
        fi

        if [[ -z "${{ inputs.git_author_email }}" ]]; then
          echo "::set-output name=git_author_email::41898282+github-actions[bot]@users.noreply.github.com"
        else
          echo "::set-output name=git_author_email::${{ inputs.git_author_email }}"
        fi

        if [[ -z "${{ inputs.git_committer_name }}" ]]; then
          if [[ -z "${{ inputs.git_author_name }}" ]]; then
            echo "::set-output name=git_committer_name::github-actions[bot]"
          else
            echo "::set-output name=git_committer_name::${{ inputs.git_author_name }}"
          fi
        else
          echo "::set-output name=git_committer_name::${{ inputs.git_committer_name }}"
        fi

        if [[ -z "${{ inputs.git_committer_email }}" ]]; then
          if [[ -z "${{ inputs.git_author_email }}" ]]; then
            echo "::set-output name=git_committer_email::41898282+github-actions[bot]@users.noreply.github.com"
          else
            echo "::set-output name=git_committer_email::${{ inputs.git_author_email }}"
          fi
        else
          echo "::set-output name=git_committer_email::${{ inputs.git_committer_email }}"
        fi

        if [[ -z "${{ inputs.vendor_path }}" ]]; then
          echo "::set-output name=vendor_path::.luarocks"
        else
          echo "::set-output name=vendor_path::${{ inputs.vendor_path }}"
        fi

    - uses: actions/checkout@v3

    - uses: leafo/gh-actions-lua@v9.1.0
      with:
        luaVersion: ${{ steps.vars.outputs.lua_version }}
        
    - uses: leafo/gh-actions-luarocks@v4.3.0
      with:
        luarocksVersion: ${{ steps.vars.outputs.luarocks_version }}
        
    - name: Install luacheck
      run: luarocks install luacheck

    - name: Check if rockspec file is present
      id: rockspec
      run: |
        rockspec=$(
          find . -type f -iname "*.rockspec" \
          | head -n 1 \
          | cut -d/ -f2-
        )

        if [[ -s "${rockspec}" ]]; then
          echo "::set-output name=file_path::${rockspec}"
          echo "::set-output name=is_present::true"
        else
          echo "::set-output name=is_present::false"
        fi

    - uses: actions/cache@v3
      id: cache
      if: steps.rockspec.outputs.is_present == 'true'
      with:
        path: ${{ steps.vars.outputs.vendor_path }}
        key: "${{ runner.os }}-luarocks_vendor_${{ hashFiles('**/*.rockspec') }}"

    - name: Install
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        luarocks install --tree ${{ steps.vars.outputs.vendor_path }} lua-globals

        if [[ "${{ steps.rockspec.outputs.is_present }}" == "true" ]]; then
          luarocks install --tree ${{ steps.vars.outputs.vendor_path }} --only-deps ${{ steps.rockspec.outputs.file_path }}
        fi

        lr_path=$(luarocks path --tree ${{ steps.vars.outputs.vendor_path }} --lr-path )
        echo "LUA_PATH=${lr_path/;/:}:${LUA_PATH}" >> $GITHUB_ENV

        lr_cpath=$(luarocks path --tree ${{ steps.vars.outputs.vendor_path }} --lr-cpath)
        echo "LUA_CPATH=${lr_cpath/;/:}:${LUA_CPATH}" >> $GITHUB_ENV

        lr_bin=$(luarocks path --tree ${{ steps.vars.outputs.vendor_path }} --lr-bin)
        echo "${lr_bin/;/:}" >> $GITHUB_PATH

    - name: Update lua globals
      env:
        PATHS: ${{ steps.vars.outputs.paths }}
        CONFIG_FILE: ${{ steps.vars.outputs.config_file }}
        LUA_VERSION: ${{ steps.vars.outputs.lua_version }}
        CUSTOM_LUA_GLOBALS: ${{ inputs.custom_lua_globals }}
        DEBUG_ENABLED: ${{ secrets.ACTIONS_STEP_DEBUG == 'true' || inputs.debug_enabled }}
      run: |
        script="update_lua_globals.sh"
        curl -sL --retry 5 \
          "${GITHUB_SERVER_URL}/${{ env.WORKFLOW_REPO }}/raw/${{ env.WORKFLOW_REF }}/bin/${script}" |
        bash

    - name: Get file changes
      id: changes
      run: |
        changes=$(git ls-files \
          --modified \
          --others \
          --exclude-standard \
          ${{ steps.vars.outputs.config_file }}
        )
        echo "::debug::${changes}"

        if [ -z "${changes}" ]; then
          echo "::set-output name=clean::true"
        else
          files=()
          echo "::group::Files changed"
          while IFS= read -r line; do
            files+=("${line}")
            echo "::notice file=${file}::File changed: ${line}"
            echo "::debug::$(git diff ${file})"
          done <<< ${changes}
          echo "::endgroup::"
          echo "::set-output name=files::${files[@]}"
          echo "::set-output name=clean::false"
        fi

    - name: Install problem matcher
      shell: bash
      run: |
        curl -sL --fail --retry 5 \
          -o ${{ env.PROBLEM_MATCHER }} \
          "${GITHUB_SERVER_URL}/${{ env.WORKFLOW_REPO }}/raw/${{ env.WORKFLOW_REF }}/.github/${{ env.PROBLEM_MATCHER }}"

    - name: Luacheck Lint
      id: luacheck
      shell: bash --noprofile --norc {0}
      run: |
        echo "::add-matcher::${{ env.PROBLEM_MATCHER }}"
        luacheck ${{ steps.vars.outputs.paths }} \
          --formatter plain \
          --codes --ranges
        exitcode=$?
        
        echo "::remove-matcher owner=luacheck-plain_error::"
        echo "::remove-matcher owner=luacheck-plain_warning::"

        rm -fv ${{ env.PROBLEM_MATCHER }}

        if [ "$exitcode" -gt 1 ]; then
          exit $exitcode
        else
          exit 0
        fi

    - name: Upload updated files
      if: steps.changes.outputs.clean == 'false' && inputs.pr_enabled == true
      uses: actions/upload-artifact@v3
      with:
        name: luacheckrc
        path: ${{ steps.changes.outputs.files }}

  create-pr:
    runs-on: ubuntu-latest
    needs: setup-and-lint
    if: needs.setup-and-lint.outputs.clean == 'false' && inputs.pr_enabled == true

    steps:

    - uses: actions/checkout@v3
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Download updated files
      uses: actions/download-artifact@v3
      with:
        name: luacheckrc

    - name: Commit files
      id: commit
      env:
        GIT_AUTHOR_NAME: ${{ needs.setup-and-lint.outputs.git_author_name }}
        GIT_AUTHOR_EMAIL: ${{ needs.setup-and-lint.outputs.git_author_email }}
        GIT_COMMITTER_NAME: ${{ needs.setup-and-lint.outputs.git_committer_name }}
        GIT_COMMITTER_EMAIL: ${{ needs.setup-and-lint.outputs.git_committer_email }}
      run: |
        git add ${{ needs.setup-and-lint.outputs.files }}
        git commit -m "Update config and autocomplete"

    - name: Create a PR
      id: pr
      uses: peter-evans/create-pull-request@v4
      with:
        token: ${{ secrets.token }}
        committer: "${{ format(
          '{0} <{1}>',
          needs.setup-and-lint.outputs.git_committer_name,
          needs.setup-and-lint.outputs.git_committer_email ) }}"
        author: "${{ format(
          '{0} <{1}>',
          needs.setup-and-lint.outputs.git_author_name,
          needs.setup-and-lint.outputs.git_author_email ) }}"
        branch: bot/lua-globals-patch
        delete-branch: true
        signoff: false
        title: "[Luacheck] Update config"
        body: |
          **Update**:
            - Luacheck globals list
        labels: |
          automation
          lua
          dep

    - name: Show info
      run: |
        echo "::notice::${{ format(
          'Pull request #{0} is {1}: {2}',
          steps.pr.outputs.pull-request-number,
          steps.pr.outputs.pull-request-operation,
          steps.pr.outputs.pull-request-url
        ) }}"

    - name: Enable Pull Request Automerge
      if: steps.pr.outputs.pull-request-operation == 'created' && inputs.automerge_enabled == true
      uses: peter-evans/enable-pull-request-automerge@v2
      with:
        token: ${{ secrets.token }}
        pull-request-number: ${{ steps.pr.outputs.pull-request-number }}
        merge-method: squash
